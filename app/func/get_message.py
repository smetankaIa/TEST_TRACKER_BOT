from bot import types, parser

def get_tasks_message(task, page, tasks_per_page=3):
   # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –∏—Å–∫–ª—é—á–∞—è –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–∫—Ä—ã—Ç–∞"
    tasks = task

    total_pages = (len(tasks) - 1) // tasks_per_page + 1
    start = page * tasks_per_page
    end = start + tasks_per_page
    current_tasks = tasks[start:end]

    mes = "\n".join([
        f"ID: {task['id']}, \n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['summary']}, \n"
        f"–ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: {task.get('createdBy', {}).get('display')}, \n"
        f"–ü—Ä–æ–µ–∫—Ç: {task.get('project', {}).get('display')}, \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî∫ {task.get('priority', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parser.parse(task.get('createdAt')).date()}, \n"
        f"–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {task.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}, \n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task.get('status', {}).get('display')}\n\n"
        for task in current_tasks
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"tasks_prev_{page - 1}"
        ))
    if end < len(tasks):
        buttons.append(types.InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"tasks_next_{page + 1}"
        ))
    if buttons:
        keyboard.add(*buttons)
    return mes, keyboard
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def get_task_NOT_clossed_message(tasks, page, tasks_per_page=3):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–∞"
    filtered_tasks = [task for task in tasks if task.get('status', {}).get('display', '').lower() != '–∑–∞–∫—Ä—ã—Ç']
    
    total_pages = (len(filtered_tasks) - 1) // tasks_per_page + 1
    start = page * tasks_per_page
    end = start + tasks_per_page
    current_tasks = filtered_tasks[start:end]

    mes = "\n".join([
        f"ID: {task['id']}, \n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['summary']}, \n"
        f"–ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: {task.get('createdBy', {}).get('display')}, \n"
        f"–ü—Ä–æ–µ–∫—Ç: {task.get('project', {}).get('display')}, \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî∫ {task.get('priority', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parser.parse(task.get('createdAt')).date()}, \n"
        f"–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {task.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}, \n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task.get('status', {}).get('display')}\n\n"
        for task in current_tasks
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"tasks_prev_{page - 1}"
        ))
    if end < len(filtered_tasks):
        buttons.append(types.InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"tasks_next_{page + 1}"
        ))
    if buttons:
        keyboard.add(*buttons)
    return mes, keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def get_closed_tasks_message(tasks, page, tasks_per_page=3):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É "–ó–∞–∫—Ä—ã—Ç–∞"
    closed_tasks = [task for task in tasks if task.get('status', {}).get('display', '').lower() == '–∑–∞–∫—Ä—ã—Ç']
    
    total_pages = (len(closed_tasks) - 1) // tasks_per_page + 1
    start = page * tasks_per_page
    end = start + tasks_per_page
    current_tasks = closed_tasks[start:end]

    if not current_tasks:
        return "–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á", None

    mes = "\n".join([
        f"ID: {task['id']}, \n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['summary']}, \n"
        f"–ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: {task.get('createdBy', {}).get('display')}, \n"
        f"–ü—Ä–æ–µ–∫—Ç: {task.get('project', {}).get('display')}, \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.get('priority', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parser.parse(task.get('createdAt')).date()}, \n"
        f"–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {task.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}, \n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task.get('status', {}).get('display')}\n\n"
        for task in current_tasks
    ])

    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"closed_tasks_prev_{page - 1}"
        ))
    if end < len(closed_tasks):
        buttons.append(types.InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"closed_tasks_next_{page + 1}"
        ))

    if buttons:
        keyboard.add(*buttons)
    
    return mes, keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
def get_projects_message(projects, page, projects_per_page=5):
    total_pages = (len(projects) - 1) // projects_per_page + 1
    start = page * projects_per_page
    end = start + projects_per_page
    current_projects = projects[start:end]

    mes = "\n".join([f"–ü—Ä–æ–µ–∫—Ç: {project['name']}" for project in current_projects])

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"projects_prev_{page - 1}"
        ))
    if end < len(projects):
        buttons.append(types.InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"projects_next_{page + 1}"
        ))
    if buttons:
        keyboard.add(*buttons)
    return mes, keyboard

def get_personal_tasks_message(tasks, page, tasks_per_page=3):
    total_pages = (len(tasks) - 1) // tasks_per_page + 1
    start = page * tasks_per_page
    end = start + tasks_per_page
    current_tasks = tasks[start:end]

    mes = "\n".join([
        f"ID: {task['id']}, \n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['summary']}, \n"
        f"–ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: {task.get('createdBy', {}).get('display')}, \n"
        f"–ü—Ä–æ–µ–∫—Ç: {task.get('project', {}).get('display')}, \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.get('priority', {}).get('display', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}, \n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parser.parse(task.get('createdAt')).date()}, \n"
        f"–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {task.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}, \n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task.get('status', {}).get('display')}\n\n"
        for task in current_tasks
    ])

    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    keyboard = types.InlineKeyboardMarkup()
    if page > 0:
        keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"personal_tasks_prev_{page - 1}"))
    if end < len(tasks):
        keyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"personal_tasks_next_{page + 1}"))

    return mes, keyboard