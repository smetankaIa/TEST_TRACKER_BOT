from bot import pagination_state, types, bot, user_state
from func.get_message import get_tasks_message, get_closed_tasks_message, get_task_NOT_clossed_message
from func.fetch import fetch_tasks, fetch_user_tasks
from handlers.star_handler import StartHandler
from handlers.task_handler import TaskHandler

class HandlerTaskActions:            
    def handle_task_actions(message):
        user_id = message.from_user.id
        if message.text == "üìë –í—Å–µ –∑–∞–¥–∞—á–∏":
            tasks = fetch_user_tasks(user_id)
            if tasks:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pagination_state[message.chat.id] = {
                    'tasks': tasks,
                    'page': 0
                }
                page = 0
                mes, keyboard = get_task_NOT_clossed_message(tasks, page)
                bot.send_message(message.chat.id, text=mes, reply_markup=keyboard)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á")
                markup.add(back)
                bot.send_message(message.chat.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=markup)

        elif message.text == "–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏":
                tasks = fetch_user_tasks(user_id)
                
                if tasks: 
                    pagination_state[message.chat.id] = {
                        'tasks': tasks,
                        'page' : 0
                    }
                    page = 0
                    mes, keyboard = get_closed_tasks_message(tasks, page)
                    bot.send_message(message.chat.id, text=mes, reply_markup=keyboard)
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á")
                    markup.add(back)
                    bot.send_message(message.chat.id, text=f"–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç", reply_markup=markup)
                return
        elif message.text == "üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏ (–ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)":
            user_state_entry = user_state.get(message.chat.id, {})
            saved_name = user_state_entry.get('name', None)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á")
            if saved_name:
                btn_saved_name = types.KeyboardButton(saved_name)
                btn_other = types.KeyboardButton("–î—Ä—É–≥–æ–µ")
                markup.add(btn_saved_name, btn_other)
            else:
                markup.add(back)
                bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á", reply_markup=markup)
                user_state_entry['state'] = 'waiting_for_executor_name'
                user_state[message.chat.id] = user_state_entry
                return
            markup.add(back)
            bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–µ':", reply_markup=markup)
            user_state_entry['state'] = 'selecting_executor_name'
            user_state[message.chat.id] = user_state_entry

        elif message.text == "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            StartHandler.start(message)

        elif message.text == "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á":
            TaskHandler.task_menu(message)

        else:
            bot.send_message(message.chat.id, text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
