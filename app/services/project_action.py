from app.func.fetch import fetch_projects, fetch_tasks
from app.func.get_message import get_projects_message, get_tasks_message
from app.handlers.project_handler import ProjectHandler
from app.bot import pagination_state, bot, types, user_state
from app.handlers.star_handler import StartHandler



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
class HandlerProjectActions:                
    def handle_project_actions(message):
        if message.text == "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã":
            projects = fetch_projects()
            if projects:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pagination_state[message.chat.id] = {
                    'projects': projects,
                    'page': 0
                }
                page = 0
                mes, keyboard = get_projects_message(projects, page)
                bot.send_message(message.chat.id, text=mes, reply_markup=keyboard)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤")
                markup.add(back)
                bot.send_message(message.chat.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=markup)

        elif message.text == "üìÑ–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É)":
            projects = fetch_projects()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤")
            project_buttons = [types.KeyboardButton(project['name']) for project in projects]
            for i in range(0, len(project_buttons), 2):
                    markup.add(*project_buttons[i:i+2])
            markup.add(back)
            if projects:
                mes = "\n".join([f"–ü—Ä–æ–µ–∫—Ç: {project['name']}" for project in projects])
                bot.send_message(message.chat.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n{mes}", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=markup)
            user_state[message.chat.id]['state'] = 'waiting_for_project_name_for_tasks'

        elif message.text == "üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ (–ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É)":
            projects = fetch_projects()
            user_state_entry = user_state.get(message.chat.id, {})
            user_state_entry['state'] = 'waiting_for_project_name_for_assigned_tasks'
            user_state[message.chat.id] = user_state_entry
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤")
            project_buttons = [types.KeyboardButton(project['name']) for project in projects]
            for i in range(0, len(project_buttons), 2):
                    markup.add(*project_buttons[i:i+2])
            markup.add(back)
            if projects:
                mes = "\n".join([f"–ü—Ä–æ–µ–∫—Ç: {project['name']}" for project in projects])
                bot.send_message(message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=markup)

        elif message.text == "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            user_state[message.chat.id]['state'] = None
            StartHandler.start(message)

        elif message.text == "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤":
            user_state[message.chat.id]['state'] = 'projects'
            ProjectHandler.project_menu(message)

        else:
            project_name = message.text.strip().lower()
            tasks = fetch_tasks()
            project_tasks = [
                task for task in tasks
                if task.get('project', {}).get('display', '').lower() == project_name
            ]
            if project_tasks:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pagination_state[message.chat.id] = {
                    'tasks': project_tasks,
                    'page': 0
                }
                page = 0
                mes, keyboard = get_tasks_message(project_tasks, page)
                bot.send_message(message.chat.id, text=mes, reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, text=f"–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
